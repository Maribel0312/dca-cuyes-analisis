import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from io import BytesIO

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="An√°lisis DCA - Engorde de Cuyes", layout="wide", page_icon="üêπ")

# ENCABEZADO PERSONALIZADO
st.markdown("""
<div style='background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;'>
    <h1 style='text-align: center; color: #1f77b4;'>An√°lisis Estad√≠stico de Dise√±os Experimentales</h1>
    <h3 style='text-align: center; color: #2c3e50;'>Dise√±o Completamente al Azar (DCA) - Engorde de Cuyes</h3>
    <p style='text-align: center; font-size: 18px;'><b>Nombre:</b> Dina Maribel Yana Yucra | <b>C√≥digo:</b> 221086</p>
</div>
""", unsafe_allow_html=True)

# Sidebar para navegaci√≥n
st.sidebar.title("üìã Navegaci√≥n")

# Configuraci√≥n del experimento
st.sidebar.markdown("---")
st.sidebar.title("‚öôÔ∏è Configuraci√≥n")

with st.sidebar.expander("üîß Personalizar Experimento", expanded=False):
    st.markdown("**Par√°metros del Dise√±o:**")
    
    n_tratamientos_custom = st.slider(
        "N√∫mero de tratamientos", 
        min_value=2, 
        max_value=6, 
        value=4,
        help="Cantidad de dietas diferentes a comparar"
    )
    
    n_repeticiones_custom = st.number_input(
        "Repeticiones por tratamiento",
        min_value=5,
        max_value=30,
        value=15,
        help="N√∫mero de unidades experimentales por tratamiento"
    )
    
    alpha_custom = st.select_slider(
        "Nivel de significancia (Œ±)",
        options=[0.01, 0.05, 0.10],
        value=0.05,
        help="Probabilidad de error tipo I"
    )
    
    st.info(f"üìä Configuraci√≥n: {n_tratamientos_custom} tratamientos √ó {n_repeticiones_custom} repeticiones = {n_tratamientos_custom * n_repeticiones_custom} observaciones")

st.sidebar.markdown("---")

seccion = st.sidebar.radio(
    "Seleccione una secci√≥n:",
    ["üè† Inicio", "üìö Teor√≠a", "üìä Modelos Experimentales", "üì§ Mis Datos", "üìà Comparaci√≥n de Modelos"]
)

modelo_seleccionado = None
if seccion == "üìä Modelos Experimentales":
    modelo_seleccionado = st.sidebar.selectbox(
        "Seleccione el Modelo:",
        ["Modelo 1: Balanceado", "Modelo 2: No Balanceado", 
         "Modelo 3: Bal-Bal (Sub)", "Modelo 4: Bal-NoBal (Sub)",
         "Modelo 5: NoBal-Bal (Sub)", "Modelo 6: NoBal-NoBal (Sub)"]
    )

# Funciones para generar datos
def generar_datos_modelo1():
    np.random.seed(42)
    datos = []
    medias = {"T1": 520, "T2": 580, "T3": 545, "T4": 595}
    desv = {"T1": 28, "T2": 32, "T3": 25, "T4": 35}
    
    for trat in ["T1", "T2", "T3", "T4"]:
        for i in range(15):
            peso_inicial = np.random.normal(250, 15)
            ganancia = np.random.normal(medias[trat], desv[trat])
            datos.append({
                "Cuy": i+1,
                "Tratamiento": trat,
                "Peso_Inicial_g": round(peso_inicial, 1),
                "Peso_Final_g": round(peso_inicial + ganancia, 1),
                "Ganancia_Peso_g": round(ganancia, 1)
            })
    return pd.DataFrame(datos)

def generar_datos_modelo2():
    np.random.seed(123)
    datos = []
    medias = {"T1": 515, "T2": 590, "T3": 540, "T4": 605}
    desv = {"T1": 40, "T2": 35, "T3": 38, "T4": 42}
    n_cuyes = {"T1": 14, "T2": 18, "T3": 16, "T4": 20}
    
    for trat in ["T1", "T2", "T3", "T4"]:
        for i in range(n_cuyes[trat]):
            peso_inicial = np.random.normal(248, 22)
            ganancia = np.random.normal(medias[trat], desv[trat])
            datos.append({
                "Cuy": i+1,
                "Tratamiento": trat,
                "Peso_Inicial_g": round(peso_inicial, 1),
                "Peso_Final_g": round(peso_inicial + ganancia, 1),
                "Ganancia_Peso_g": round(ganancia, 1)
            })
    return pd.DataFrame(datos)

def generar_datos_modelo3():
    np.random.seed(456)
    datos = []
    medias = {"T1": 525, "T2": 575, "T3": 550, "T4": 588}
    desv_poza = {"T1": 22, "T2": 25, "T3": 20, "T4": 28}
    desv_cuy = 18
    
    for trat in ["T1", "T2", "T3", "T4"]:
        for poza in range(1, 6):
            media_poza = np.random.normal(medias[trat], desv_poza[trat])
            for cuy in range(1, 5):
                peso_inicial = np.random.normal(252, 18)
                ganancia = np.random.normal(media_poza, desv_cuy)
                datos.append({
                    "Poza": f"{trat}-P{poza}",
                    "Cuy": cuy,
                    "Tratamiento": trat,
                    "Peso_Inicial_g": round(peso_inicial, 1),
                    "Peso_Final_g": round(peso_inicial + ganancia, 1),
                    "Ganancia_Peso_g": round(ganancia, 1)
                })
    return pd.DataFrame(datos)

def generar_datos_modelo4():
    np.random.seed(789)
    datos = []
    medias = {"T1": 518, "T2": 585, "T3": 548, "T4": 600}
    desv_poza = {"T1": 28, "T2": 30, "T3": 24, "T4": 32}
    desv_cuy = 16
    n_cuyes_poza = {"T1": 3, "T2": 4, "T3": 5, "T4": 3}
    
    for trat in ["T1", "T2", "T3", "T4"]:
        for poza in range(1, 6):
            media_poza = np.random.normal(medias[trat], desv_poza[trat])
            for cuy in range(1, n_cuyes_poza[trat] + 1):
                peso_inicial = np.random.normal(249, 19)
                ganancia = np.random.normal(media_poza, desv_cuy)
                datos.append({
                    "Poza": f"{trat}-P{poza}",
                    "Cuy": cuy,
                    "Tratamiento": trat,
                    "Peso_Inicial_g": round(peso_inicial, 1),
                    "Peso_Final_g": round(peso_inicial + ganancia, 1),
                    "Ganancia_Peso_g": round(ganancia, 1)
                })
    return pd.DataFrame(datos)

def generar_datos_modelo5():
    np.random.seed(321)
    datos = []
    medias = {"T1": 522, "T2": 578, "T3": 552, "T4": 592}
    desv_poza = {"T1": 26, "T2": 29, "T3": 23, "T4": 31}
    desv_cuy = 17
    n_pozas = {"T1": 4, "T2": 6, "T3": 5, "T4": 7}
    
    for trat in ["T1", "T2", "T3", "T4"]:
        for poza in range(1, n_pozas[trat] + 1):
            media_poza = np.random.normal(medias[trat], desv_poza[trat])
            for cuy in range(1, 5):
                peso_inicial = np.random.normal(251, 17)
                ganancia = np.random.normal(media_poza, desv_cuy)
                datos.append({
                    "Poza": f"{trat}-P{poza}",
                    "Cuy": cuy,
                    "Tratamiento": trat,
                    "Peso_Inicial_g": round(peso_inicial, 1),
                    "Peso_Final_g": round(peso_inicial + ganancia, 1),
                    "Ganancia_Peso_g": round(ganancia, 1)
                })
    return pd.DataFrame(datos)

def generar_datos_modelo6():
    np.random.seed(654)
    datos = []
    medias = {"T1": 510, "T2": 595, "T3": 535, "T4": 610}
    desv_poza = {"T1": 30, "T2": 33, "T3": 27, "T4": 36}
    desv_cuy = 20
    n_pozas = {"T1": 4, "T2": 6, "T3": 5, "T4": 7}
    cuyes_por_poza = {
        "T1": [3, 4, 5, 4],
        "T2": [5, 4, 6, 4, 5, 4],
        "T3": [4, 5, 3, 6, 4],
        "T4": [6, 4, 5, 4, 6, 5, 4]
    }
    
    for trat in ["T1", "T2", "T3", "T4"]:
        for poza in range(n_pozas[trat]):
            media_poza = np.random.normal(medias[trat], desv_poza[trat])
            n_cuyes = cuyes_por_poza[trat][poza]
            for cuy in range(1, n_cuyes + 1):
                peso_inicial = np.random.normal(247, 21)
                ganancia = np.random.normal(media_poza, desv_cuy)
                datos.append({
                    "Poza": f"{trat}-P{poza+1}",
                    "Cuy": cuy,
                    "Tratamiento": trat,
                    "Peso_Inicial_g": round(peso_inicial, 1),
                    "Peso_Final_g": round(peso_inicial + ganancia, 1),
                    "Ganancia_Peso_g": round(ganancia, 1)
                })
    return pd.DataFrame(datos)

# PRUEBAS DE SUPUESTOS
def pruebas_supuestos(df):
    """Realiza pruebas de normalidad y homogeneidad de varianzas"""
    st.markdown("### üî¨ Verificaci√≥n de Supuestos Estad√≠sticos")
    
    st.info("""
    **Supuestos del ANOVA:**
    1. **Normalidad:** Los residuos deben seguir una distribuci√≥n normal
    2. **Homogeneidad de varianzas:** Las varianzas entre grupos deben ser similares
    3. **Independencia:** Las observaciones deben ser independientes
    """)
    
    col1, col2 = st.columns(2)
    
    # Prueba de Normalidad (Shapiro-Wilk)
    with col1:
        st.markdown("#### üìä Prueba de Normalidad (Shapiro-Wilk)")
        
        # Calcular residuos
        grand_mean = df['Ganancia_Peso_g'].mean()
        group_means = df.groupby('Tratamiento')['Ganancia_Peso_g'].transform('mean')
        residuos = df['Ganancia_Peso_g'] - group_means
        
        # Shapiro-Wilk
        stat_shapiro, p_shapiro = stats.shapiro(residuos)
        
        st.latex(r"H_0: \text{Los residuos siguen una distribuci√≥n normal}")
        st.latex(r"H_1: \text{Los residuos NO siguen una distribuci√≥n normal}")
        
        resultado_norm = pd.DataFrame({
            'Estad√≠stico': ['W', 'P-valor', 'Decisi√≥n'],
            'Valor': [
                f"{stat_shapiro:.6f}",
                f"{p_shapiro:.6f}",
                f"{'‚úÖ Normalidad aceptada' if p_shapiro > alpha_custom else '‚ùå Normalidad rechazada'}"
            ]
        })
        st.dataframe(resultado_norm, hide_index=True, use_container_width=True)
        
        if p_shapiro > alpha_custom:
            st.success(f"‚úÖ p-valor ({p_shapiro:.4f}) > Œ± ({alpha_custom}): Se cumple el supuesto de normalidad")
        else:
            st.warning(f"‚ö†Ô∏è p-valor ({p_shapiro:.4f}) ‚â§ Œ± ({alpha_custom}): No se cumple normalidad. Considere transformaciones o pruebas no param√©tricas")
    
    # Prueba de Homogeneidad de Varianzas (Levene)
    with col2:
        st.markdown("#### üìä Prueba de Homogeneidad (Levene)")
        
        grupos = [df[df['Tratamiento'] == t]['Ganancia_Peso_g'].values 
                  for t in sorted(df['Tratamiento'].unique())]
        
        stat_levene, p_levene = stats.levene(*grupos)
        
        st.latex(r"H_0: \sigma_1^2 = \sigma_2^2 = ... = \sigma_k^2")
        st.latex(r"H_1: \text{Al menos una varianza es diferente}")
        
        resultado_homo = pd.DataFrame({
            'Estad√≠stico': ['W', 'P-valor', 'Decisi√≥n'],
            'Valor': [
                f"{stat_levene:.6f}",
                f"{p_levene:.6f}",
                f"{'‚úÖ Homogeneidad aceptada' if p_levene > alpha_custom else '‚ùå Homogeneidad rechazada'}"
            ]
        })
        st.dataframe(resultado_homo, hide_index=True, use_container_width=True)
        
        if p_levene > alpha_custom:
            st.success(f"‚úÖ p-valor ({p_levene:.4f}) > Œ± ({alpha_custom}): Se cumple homogeneidad de varianzas")
        else:
            st.warning(f"‚ö†Ô∏è p-valor ({p_levene:.4f}) ‚â§ Œ± ({alpha_custom}): Varianzas heterog√©neas. Considere prueba Welch ANOVA")
    
    # Gr√°ficos de diagn√≥stico
    st.markdown("#### üìà Gr√°ficos de Diagn√≥stico")
    
    fig = make_subplots(
        rows=1, cols=3,
        subplot_titles=('Q-Q Plot (Normalidad)', 'Residuos vs Valores Ajustados', 'Histograma de Residuos')
    )
    
    # Q-Q Plot
    theoretical_quantiles = stats.norm.ppf(np.linspace(0.01, 0.99, len(residuos)))
    sample_quantiles = np.sort(residuos)
    
    fig.add_trace(
        go.Scatter(x=theoretical_quantiles, y=sample_quantiles, mode='markers',
                   marker=dict(color='blue', size=6), name='Datos'),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=[theoretical_quantiles.min(), theoretical_quantiles.max()],
                   y=[theoretical_quantiles.min(), theoretical_quantiles.max()],
                   mode='lines', line=dict(color='red', dash='dash'), name='L√≠nea te√≥rica'),
        row=1, col=1
    )
    
    # Residuos vs Ajustados
    fig.add_trace(
        go.Scatter(x=group_means, y=residuos, mode='markers',
                   marker=dict(color='green', size=6), name='Residuos'),
        row=1, col=2
    )
    fig.add_hline(y=0, line_dash="dash", line_color="red", row=1, col=2)
    
    # Histograma
    fig.add_trace(
        go.Histogram(x=residuos, nbinsx=20, marker=dict(color='purple'), name='Residuos'),
        row=1, col=3
    )
    
    fig.update_xaxes(title_text="Cuantiles Te√≥ricos", row=1, col=1)
    fig.update_yaxes(title_text="Cuantiles Muestrales", row=1, col=1)
    fig.update_xaxes(title_text="Valores Ajustados", row=1, col=2)
    fig.update_yaxes(title_text="Residuos", row=1, col=2)
    fig.update_xaxes(title_text="Residuos", row=1, col=3)
    fig.update_yaxes(title_text="Frecuencia", row=1, col=3)
    
    fig.update_layout(height=400, showlegend=False)
    st.plotly_chart(fig, use_container_width=True)
    
    # Tabla de varianzas por grupo
    st.markdown("#### üìã Varianzas por Tratamiento")
    var_table = df.groupby('Tratamiento')['Ganancia_Peso_g'].agg(['var', 'std']).round(2)
    var_table.columns = ['Varianza', 'Desv. Est√°ndar']
    var_table['CV (%)'] = (var_table['Desv. Est√°ndar'] / df.groupby('Tratamiento')['Ganancia_Peso_g'].mean() * 100).round(2)
    st.dataframe(var_table, use_container_width=True)
    
    return {
        'shapiro_stat': stat_shapiro,
        'shapiro_p': p_shapiro,
        'levene_stat': stat_levene,
        'levene_p': p_levene,
        'normalidad_ok': p_shapiro > alpha_custom,
        'homogeneidad_ok': p_levene > alpha_custom
    }

# C√ÅLCULO ANOVA UNIFACTORIAL
def calcular_anova_unifactorial_pasos(df):
    st.markdown("### üìê C√°lculos Paso a Paso - ANOVA Unifactorial")
    
    n_total = len(df)
    tratamientos = sorted(df['Tratamiento'].unique())
    k = len(tratamientos)
    
    col1, col2, col3 = st.columns(3)
    col1.metric("N total", n_total)
    col2.metric("Tratamientos (k)", k)
    col3.metric("Grupos", k)
    
    st.markdown("#### Paso 2: C√°lculo de medias")
    medias_df = df.groupby('Tratamiento').agg({
        'Ganancia_Peso_g': ['count', 'mean', 'sum']
    }).round(2)
    medias_df.columns = ['n', 'Media', 'Suma']
    st.dataframe(medias_df, use_container_width=True)
    
    grand_mean = df['Ganancia_Peso_g'].mean()
    st.info(f"**Media General (»≤..):** {grand_mean:.2f} g")
    
    st.markdown("#### Paso 3: Sumas de Cuadrados")
    
    ss_total = ((df['Ganancia_Peso_g'] - grand_mean) ** 2).sum()
    st.write(f"**SCT = {ss_total:.2f}**")
    
    ss_between = 0
    for trat in tratamientos:
        n_i = len(df[df['Tratamiento'] == trat])
        mean_i = df[df['Tratamiento'] == trat]['Ganancia_Peso_g'].mean()
        ss_between += n_i * (mean_i - grand_mean) ** 2
    
    st.write(f"**SC Trat = {ss_between:.2f}**")
    
    ss_within = ss_total - ss_between
    st.write(f"**SC Error = {ss_within:.2f}**")
    
    df_between = k - 1
    df_within = n_total - k
    df_total = n_total - 1
    
    ms_between = ss_between / df_between
    ms_within = ss_within / df_within
    
    f_calc = ms_between / ms_within
    p_value = 1 - stats.f.cdf(f_calc, df_between, df_within)
    
    if p_value < alpha_custom:
        st.success(f"‚úÖ p-valor < {alpha_custom}, rechazamos H‚ÇÄ")
    else:
        st.warning(f"‚ö†Ô∏è p-valor ‚â• {alpha_custom}, no rechazamos H‚ÇÄ")
    
    return {
        'SS_Between': ss_between, 'SS_Within': ss_within, 'SS_Total': ss_total,
        'DF_Between': df_between, 'DF_Within': df_within, 'DF_Total': df_total,
        'MS_Between': ms_between, 'MS_Within': ms_within,
        'F_Statistic': f_calc, 'P_Value': p_value
    }

# ANOVA ANIDADO PARA SUBMUESTREO
def calcular_anova_submuestreo_pasos(df):
    """ANOVA anidado: Tratamiento > Poza(Tratamiento) > Cuy(Poza)"""
    
    st.markdown("### üéØ ANOVA con Submuestreo (Modelo Anidado)")
    
    st.info("""
    **Modelo Anidado:** Yijk = Œº + œÑi + Œ≤(i)j + Œµijk
    - œÑi = Efecto del tratamiento i
    - Œ≤(i)j = Efecto de la poza j anidada en tratamiento i  
    - Œµijk = Error (cuy k dentro de poza j)
    """)
    
    tratamientos = sorted(df['Tratamiento'].unique())
    t = len(tratamientos)
    n_total = len(df)
    
    pozas_info = df.groupby(['Tratamiento', 'Poza']).size().reset_index(name='n_cuyes')
    pozas_por_trat = df.groupby('Tratamiento')['Poza'].nunique()
    
    col1, col2, col3 = st.columns(3)
    col1.metric("Tratamientos (t)", t)
    col2.metric("Pozas totales", df['Poza'].nunique())
    col3.metric("Cuyes totales (N)", n_total)
    
    grand_mean = df['Ganancia_Peso_g'].mean()
    medias_trat = df.groupby('Tratamiento')['Ganancia_Peso_g'].mean()
    medias_poza = df.groupby(['Tratamiento', 'Poza'])['Ganancia_Peso_g'].mean()
    
    ss_total = ((df['Ganancia_Peso_g'] - grand_mean) ** 2).sum()
    
    ss_trat = 0
    for trat in tratamientos:
        n_trat = len(df[df['Tratamiento'] == trat])
        media_trat = medias_trat[trat]
        ss_trat += n_trat * (media_trat - grand_mean) ** 2
    
    ss_poza = 0
    for trat in tratamientos:
        pozas_trat = df[df['Tratamiento'] == trat]['Poza'].unique()
        media_trat = medias_trat[trat]
        for poza in pozas_trat:
            subset = df[(df['Tratamiento'] == trat) & (df['Poza'] == poza)]
            n_poza = len(subset)
            media_poza = subset['Ganancia_Peso_g'].mean()
            ss_poza += n_poza * (media_poza - media_trat) ** 2
    
    ss_error = ss_total - ss_trat - ss_poza
    
    df_trat = t - 1
    n_pozas_total = df['Poza'].nunique()
    df_poza = n_pozas_total - t
    df_error = n_total - n_pozas_total
    df_total = n_total - 1
    
    cm_trat = ss_trat / df_trat if df_trat > 0 else 0
    cm_poza = ss_poza / df_poza if df_poza > 0 else 0
    cm_error = ss_error / df_error if df_error > 0 else 1
    
    f_trat = cm_trat / cm_poza if cm_poza > 0 else 0
    f_poza = cm_poza / cm_error if cm_error > 0 else 0
    
    p_trat = 1 - stats.f.cdf(f_trat, df_trat, df_poza) if f_trat > 0 else 1
    p_poza = 1 - stats.f.cdf(f_poza, df_poza, df_error) if f_poza > 0 else 1
    
    return {
        'SS_Trat': ss_trat, 'SS_Poza': ss_poza, 'SS_Error': ss_error, 'SS_Total': ss_total,
        'DF_Trat': df_trat, 'DF_Poza': df_poza, 'DF_Error': df_error, 'DF_Total': df_total,
        'MS_Trat': cm_trat, 'MS_Poza': cm_poza, 'MS_Error': cm_error,
        'F_Trat': f_trat, 'F_Poza': f_poza,
        'P_Trat': p_trat, 'P_Poza': p_poza
    }

def mostrar_tabla_anova_anidado(result):
    """Muestra tabla ANOVA anidado final"""
    st.markdown("### üìä Tabla ANOVA Anidado Final")
    
    anova_table = pd.DataFrame({
        'Fuente de Variaci√≥n': ['Tratamientos', 'Pozas(Tratamiento)', 'Error (Cuyes)', 'Total'],
        'SC': [
            f"{result['SS_Trat']:.2f}",
            f"{result['SS_Poza']:.2f}",
            f"{result['SS_Error']:.2f}",
            f"{result['SS_Total']:.2f}"
        ],
        'GL': [
            result['DF_Trat'],
            result['DF_Poza'],
            result['DF_Error'],
            result['DF_Total']
        ],
        'CM': [
            f"{result['MS_Trat']:.2f}",
            f"{result['MS_Poza']:.2f}",
            f"{result['MS_Error']:.2f}",
            '-'
        ],
        'F': [
            f"{result['F_Trat']:.4f}",
            f"{result['F_Poza']:.4f}",
            '-',
            '-'
        ],
        'P-valor': [
            f"{result['P_Trat']:.6f}",
            f"{result['P_Poza']:.6f}",
            '-',
            '-'
        ]
    })
    
    st.dataframe(anova_table, use_container_width=True, hide_index=True)

# ANOVA BIFACTORIAL
def calcular_anova_bifactorial_pasos(df):
    st.markdown("### üìê ANOVA Bifactorial")
    st.info("Factor A = Tratamiento, Factor B = Sexo simulado")
    
    df_bif = df.copy()
    df_bif['Factor_A'] = df_bif['Tratamiento']
    
    sexos = []
    for trat in sorted(df_bif['Tratamiento'].unique()):
        subset = df_bif[df_bif['Tratamiento'] == trat]
        n_trat = len(subset)
        n_machos = n_trat // 2
        sexos_trat = ['Macho'] * n_machos + ['Hembra'] * (n_trat - n_machos)
        sexos.extend(sexos_trat)
    
    df_bif['Factor_B'] = sexos
    
    factor_a_levels = sorted(df_bif['Factor_A'].unique())
    factor_b_levels = sorted(df_bif['Factor_B'].unique())
    a = len(factor_a_levels)
    b = len(factor_b_levels)
    n_total = len(df_bif)
    
    medias_a = df_bif.groupby('Factor_A')['Ganancia_Peso_g'].mean()
    medias_b = df_bif.groupby('Factor_B')['Ganancia_Peso_g'].mean()
    grand_mean = df_bif['Ganancia_Peso_g'].mean()
    
    ss_total = ((df_bif['Ganancia_Peso_g'] - grand_mean) ** 2).sum()
    
    ss_a = 0
    for nivel in factor_a_levels:
        n_nivel = len(df_bif[df_bif['Factor_A'] == nivel])
        ss_a += n_nivel * (medias_a[nivel] - grand_mean) ** 2
    
    ss_b = 0
    for nivel in factor_b_levels:
        n_nivel = len(df_bif[df_bif['Factor_B'] == nivel])
        ss_b += n_nivel * (medias_b[nivel] - grand_mean) ** 2
    
    ss_ab = 0
    for nivel_a in factor_a_levels:
        for nivel_b in factor_b_levels:
            subset = df_bif[(df_bif['Factor_A'] == nivel_a) & (df_bif['Factor_B'] == nivel_b)]
            if len(subset) > 0:
                n_cell = len(subset)
                mean_cell = subset['Ganancia_Peso_g'].mean()
                ss_ab += n_cell * (mean_cell - medias_a[nivel_a] - medias_b[nivel_b] + grand_mean) ** 2
    
    ss_error = ss_total - ss_a - ss_b - ss_ab
    
    df_a = a - 1
    df_b = b - 1
    df_ab = (a - 1) * (b - 1)
    df_error = n_total - (a * b)
    df_total = n_total - 1
    
    cm_a = ss_a / df_a if df_a > 0 else 0
    cm_b = ss_b / df_b if df_b > 0 else 0
    cm_ab = ss_ab / df_ab if df_ab > 0 else 0
    cm_error = ss_error / df_error if df_error > 0 else 1
    
    f_a = cm_a / cm_error if cm_error > 0 else 0
    f_b = cm_b / cm_error if cm_error > 0 else 0
    f_ab = cm_ab / cm_error if cm_error > 0 else 0
    
    p_a = 1 - stats.f.cdf(f_a, df_a, df_error) if f_a > 0 else 1
    p_b = 1 - stats.f.cdf(f_b, df_b, df_error) if f_b > 0 else 1
    p_ab = 1 - stats.f.cdf(f_ab, df_ab, df_error) if f_ab > 0 else 1
    
    return {
        'SS_A': ss_a, 'SS_B': ss_b, 'SS_AB': ss_ab, 'SS_Error': ss_error, 'SS_Total': ss_total,
        'DF_A': df_a, 'DF_B': df_b, 'DF_AB': df_ab, 'DF_Error': df_error, 'DF_Total': df_total,
        'MS_A': cm_a, 'MS_B': cm_b, 'MS_AB': cm_ab, 'MS_Error': cm_error,
        'F_A': f_a, 'F_B': f_b, 'F_AB': f_ab,
        'P_A': p_a, 'P_B': p_b, 'P_AB': p_ab
    }

def mostrar_tabla_anova_unifactorial(result):
    st.markdown("### üìä Tabla ANOVA Unifactorial Final")
    anova_table = pd.DataFrame({
        'Fuente': ['Entre Tratamientos', 'Error', 'Total'],
        'SC': [f"{result['SS_Between']:.2f}", f"{result['SS_Within']:.2f}", f"{result['SS_Total']:.2f}"],
        'GL': [result['DF_Between'], result['DF_Within'], result['DF_Total']],
        'CM': [f"{result['MS_Between']:.2f}", f"{result['MS_Within']:.2f}", '-'],
        'F': [f"{result['F_Statistic']:.4f}", '-', '-'],
        'P-valor': [f"{result['P_Value']:.6f}", '-', '-']
    })
    st.dataframe(anova_table, use_container_width=True, hide_index=True)

def mostrar_tabla_anova_bifactorial(result):
    st.markdown("### üìä Tabla ANOVA Bifactorial Final")
    anova_table = pd.DataFrame({
        'Fuente': ['Factor A', 'Factor B', 'Interacci√≥n AB', 'Error', 'Total'],
        'SC': [f"{result['SS_A']:.2f}", f"{result['SS_B']:.2f}", f"{result['SS_AB']:.2f}", 
               f"{result['SS_Error']:.2f}", f"{result['SS_Total']:.2f}"],
        'GL': [result['DF_A'], result['DF_B'], result['DF_AB'], result['DF_Error'], result['DF_Total']],
        'CM': [f"{result['MS_A']:.2f}", f"{result['MS_B']:.2f}", f"{result['MS_AB']:.2f}", 
               f"{result['MS_Error']:.2f}", '-'],
        'F': [f"{result['F_A']:.4f}", f"{result['F_B']:.4f}", f"{result['F_AB']:.4f}", '-', '-'],
        'P-valor': [f"{result['P_A']:.6f}", f"{result['P_B']:.6f}", f"{result['P_AB']:.6f}", '-', '-']
    })
    st.dataframe(anova_table, use_container_width=True, hide_index=True)

def tukey_hsd(df):
    from scipy.stats import studentized_range
    medias = df.groupby('Tratamiento')['Ganancia_Peso_g'].mean().sort_values(ascending=False)
    n = df.groupby('Tratamiento')['Ganancia_Peso_g'].count()
    
    n_total = len(df)
    k = len(df['Tratamiento'].unique())
    grand_mean = df['Ganancia_Peso_g'].mean()
    
    ss_within = sum([(df[df['Tratamiento'] == t]['Ganancia_Peso_g'] - df[df['Tratamiento'] == t]['Ganancia_Peso_g'].mean()).pow(2).sum() 
                     for t in df['Tratamiento'].unique()])
    df_within = n_total - k
    mse = ss_within / df_within
    
    comparaciones = []
    tratamientos = list(medias.index)
    
    for i in range(len(tratamientos)):
        for j in range(i+1, len(tratamientos)):
            t1, t2 = tratamientos[i], tratamientos[j]
            diff = abs(medias[t1] - medias[t2])
            n_harmonic = 2 / (1/n[t1] + 1/n[t2])
            se = np.sqrt(mse / n_harmonic)
            q_crit = studentized_range.ppf(0.95, len(tratamientos), df_within)
            hsd = q_crit * se
            
            comparaciones.append({
                'Comparaci√≥n': f"{t1} vs {t2}",
                'Diferencia': round(diff, 2),
                'HSD': round(hsd, 2),
                'Significativo': 'S√≠' if diff > hsd else 'No'
            })
    
    return pd.DataFrame(comparaciones), medias

def crear_graficos(df, result_uni):
    st.markdown("## üìä Visualizaci√≥n de Resultados")
    
    fig_box = px.box(df, x='Tratamiento', y='Ganancia_Peso_g',
                     title='Distribuci√≥n por Tratamiento',
                     color='Tratamiento',
                     color_discrete_sequence=px.colors.qualitative.Set2)
    fig_box.update_layout(showlegend=False, height=500)
    st.plotly_chart(fig_box, use_container_width=True)
    
    fig_violin = px.violin(df, x='Tratamiento', y='Ganancia_Peso_g',
                          title='Densidad de Distribuci√≥n',
                          color='Tratamiento',
                          box=True,
                          color_discrete_sequence=px.colors.qualitative.Pastel)
    fig_violin.update_layout(showlegend=False, height=500)
    st.plotly_chart(fig_violin, use_container_width=True)
    
    stats_df = df.groupby('Tratamiento')['Ganancia_Peso_g'].agg(['mean', 'sem']).reset_index()
    stats_df['ci'] = stats_df['sem'] * 1.96
    
    fig_ci = go.Figure()
    fig_ci.add_trace(go.Scatter(
        x=stats_df['Tratamiento'],
        y=stats_df['mean'],
        error_y=dict(type='data', array=stats_df['ci']),
        mode='markers',
        marker=dict(size=12, color='rgb(31, 119, 180)'),
        name='Media ¬± IC95%'
    ))
    fig_ci.update_layout(title='Intervalos de Confianza 95%', height=500)
    st.plotly_chart(fig_ci, use_container_width=True)

def mostrar_interpretaciones_y_recomendaciones(df, result_uni, supuestos=None):
    st.markdown("## üí° Interpretaciones y Recomendaciones")
    
    medias = df.groupby('Tratamiento')['Ganancia_Peso_g'].mean().sort_values(ascending=False)
    mejor_trat = medias.index[0]
    mejor_media = medias.iloc[0]
    peor_trat = medias.index[-1]
    peor_media = medias.iloc[-1]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.success(f"**üèÜ Mejor Tratamiento: {mejor_trat}**")
        st.metric("Ganancia promedio", f"{mejor_media:.1f} g")
        
    with col2:
        st.error(f"**üìâ Menor Rendimiento: {peor_trat}**")
        st.metric("Ganancia promedio", f"{peor_media:.1f} g")
    
    diferencia = mejor_media - peor_media
    porcentaje = (diferencia / peor_media) * 100
    
    st.info(f"**Diferencia:** {diferencia:.1f} g ({porcentaje:.1f}% m√°s que {peor_trat})")
    
    # Interpretaci√≥n estad√≠stica
    st.markdown("### üìä Interpretaci√≥n Estad√≠stica")
    
    if result_uni['P_Value'] < alpha_custom:
        st.success(f"""
        ‚úÖ **Resultado Significativo** (p = {result_uni['P_Value']:.6f})
        
        Existe evidencia estad√≠stica suficiente para concluir que **al menos un tratamiento 
        difiere significativamente** de los dem√°s en t√©rminos de ganancia de peso.
        """)
    else:
        st.warning(f"""
        ‚ö†Ô∏è **Resultado No Significativo** (p = {result_uni['P_Value']:.6f})
        
        No hay evidencia estad√≠stica suficiente para afirmar que existen diferencias 
        entre los tratamientos evaluados.
        """)
    
    # Recomendaciones pr√°cticas
    st.markdown("### üéØ Recomendaciones para la Implementaci√≥n")
    
    st.markdown(f"""
    #### 1. **Recomendaci√≥n Principal**
    
    Se recomienda implementar el **{mejor_trat}** como dieta principal para el engorde de cuyes, 
    ya que mostr√≥ la mayor ganancia de peso promedio ({mejor_media:.1f} g) durante el per√≠odo experimental.
    
    #### 2. **An√°lisis Costo-Beneficio**
    
    Antes de la implementaci√≥n a escala comercial, considere:
    
    - **Costo del alimento por kg**
    - **Conversi√≥n alimenticia** (kg alimento / kg ganancia peso)
    - **Disponibilidad y acceso** al tipo de alimento
    - **Facilidad de preparaci√≥n** y suministro
    - **Aceptaci√≥n por parte de los animales**
    
    #### 3. **Consideraciones T√©cnicas**
    
    - **Periodo de adaptaci√≥n:** Implementar cambios dietarios gradualmente (7-10 d√≠as)
    - **Monitoreo constante:** Registrar peso semanalmente
    - **Condiciones ambientales:** Mantener temperatura (18-24¬∞C) y ventilaci√≥n adecuadas
    - **Agua limpia:** Disponibilidad ad libitum
    - **Densidad de poblaci√≥n:** No exceder 8-10 cuyes/m¬≤
    
    #### 4. **Indicadores de √âxito**
    
    Durante la implementaci√≥n, monitorear:
    
    - Ganancia diaria de peso (GDP) esperada: **{(mejor_media/84):.1f} g/d√≠a** (asumiendo 12 semanas)
    - Tasa de mortalidad: objetivo < 5%
    - √çndice de conversi√≥n alimenticia: objetivo < 4.0
    - Peso comercial objetivo: 900-1000 g a las 12-14 semanas
    
    #### 5. **Plan de Contingencia**
    
    Si el tratamiento √≥ptimo ({mejor_trat}) no est√° disponible o es muy costoso:
    
    - **Alternativa 1:** {medias.index[1]} (ganancia: {medias.iloc[1]:.1f} g)
    - **Diferencia con √≥ptimo:** {(mejor_media - medias.iloc[1]):.1f} g ({((mejor_media - medias.iloc[1])/mejor_media*100):.1f}% menos)
    
    #### 6. **Validaci√≥n en Campo**
    
    Antes de implementaci√≥n masiva:
    
    1. Realizar prueba piloto con 50-100 animales
    2. Periodo m√≠nimo de validaci√≥n: 4-6 semanas
    3. Comparar resultados con datos experimentales
    4. Ajustar protocolos seg√∫n necesidad
    
    #### 7. **Aspectos Econ√≥micos**
    """)
    
    # Tabla de an√°lisis econ√≥mico estimado
    costos_estimados = {
        'T1': 2.5,
        'T2': 3.2,
        'T3': 2.8,
        'T4': 3.5
    }
    
    precio_cuy = 25.0  # soles por cuy comercial
    
    analisis_economico = []
    for trat in medias.index:
        ganancia = medias[trat]
        costo_alimento = costos_estimados.get(trat, 3.0)
        costo_total = costo_alimento * 84  # 12 semanas
        ingreso_estimado = (ganancia / 1000) * precio_cuy
        beneficio_neto = ingreso_estimado - costo_total
        roi = (beneficio_neto / costo_total) * 100 if costo_total > 0 else 0
        
        analisis_economico.append({
            'Tratamiento': trat,
            'Ganancia (g)': f"{ganancia:.1f}",
            'Costo/d√≠a (S/)': f"{costo_alimento:.2f}",
            'Costo Total (S/)': f"{costo_total:.2f}",
            'Ingreso Est. (S/)': f"{ingreso_estimado:.2f}",
            'Beneficio Neto (S/)': f"{beneficio_neto:.2f}",
            'ROI (%)': f"{roi:.1f}"
        })
    
    st.dataframe(pd.DataFrame(analisis_economico), hide_index=True, use_container_width=True)
    
    st.caption("*Valores estimados. Ajustar seg√∫n precios locales y condiciones espec√≠ficas.*")
    
    # Validaci√≥n de supuestos
    if supuestos:
        st.markdown("#### 8. **Validez de las Conclusiones**")
        
        if supuestos['normalidad_ok'] and supuestos['homogeneidad_ok']:
            st.success("""
            ‚úÖ Los supuestos estad√≠sticos se cumplen adecuadamente:
            - Normalidad de residuos: ‚úì
            - Homogeneidad de varianzas: ‚úì
            
            Las conclusiones del an√°lisis son **estad√≠sticamente v√°lidas y confiables**.
            """)
        else:
            st.warning("""
            ‚ö†Ô∏è Advertencia sobre supuestos:
            """)
            if not supuestos['normalidad_ok']:
                st.write("- ‚ùå Normalidad no cumplida completamente")
            if not supuestos['homogeneidad_ok']:
                st.write("- ‚ùå Homogeneidad de varianzas comprometida")
            
            st.info("""
            **Recomendaci√≥n:** Las conclusiones deben tomarse con precauci√≥n. 
            Considere realizar an√°lisis complementarios o aumentar tama√±o muestral.
            """)

def exportar_excel(df, anova_uni, anova_sub, tukey_df, supuestos=None):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='Datos', index=False)
        
        # ANOVA Unifactorial
        pd.DataFrame({
            'Fuente': ['Entre Tratamientos', 'Error', 'Total'],
            'SC': [anova_uni['SS_Between'], anova_uni['SS_Within'], anova_uni['SS_Total']],
            'GL': [anova_uni['DF_Between'], anova_uni['DF_Within'], anova_uni['DF_Total']],
            'CM': [anova_uni['MS_Between'], anova_uni['MS_Within'], ''],
            'F': [anova_uni['F_Statistic'], '', ''],
            'P-valor': [anova_uni['P_Value'], '', '']
        }).to_excel(writer, sheet_name='ANOVA Unifactorial', index=False)
        
        # ANOVA Submuestreo (si existe)
        if anova_sub and 'SS_Trat' in anova_sub:
            pd.DataFrame({
                'Fuente': ['Tratamientos', 'Pozas(Trat)', 'Error', 'Total'],
                'SC': [anova_sub['SS_Trat'], anova_sub['SS_Poza'], anova_sub['SS_Error'], anova_sub['SS_Total']],
                'GL': [anova_sub['DF_Trat'], anova_sub['DF_Poza'], anova_sub['DF_Error'], anova_sub['DF_Total']],
                'CM': [anova_sub['MS_Trat'], anova_sub['MS_Poza'], anova_sub['MS_Error'], ''],
                'F': [anova_sub['F_Trat'], anova_sub['F_Poza'], '', ''],
                'P-valor': [anova_sub['P_Trat'], anova_sub['P_Poza'], '', '']
            }).to_excel(writer, sheet_name='ANOVA Submuestreo', index=False)
        
        if not tukey_df.empty:
            tukey_df.to_excel(writer, sheet_name='Tukey HSD', index=False)
        
        df.groupby('Tratamiento')['Ganancia_Peso_g'].agg(['count', 'mean', 'std', 'min', 'max']).to_excel(writer, sheet_name='Estad√≠sticas')
        
        # Supuestos
        if supuestos:
            pd.DataFrame({
                'Prueba': ['Shapiro-Wilk (Normalidad)', 'Levene (Homogeneidad)'],
                'Estad√≠stico': [supuestos['shapiro_stat'], supuestos['levene_stat']],
                'P-valor': [supuestos['shapiro_p'], supuestos['levene_p']],
                'Cumple': [
                    'S√≠' if supuestos['normalidad_ok'] else 'No',
                    'S√≠' if supuestos['homogeneidad_ok'] else 'No'
                ]
            }).to_excel(writer, sheet_name='Supuestos', index=False)
    
    return output.getvalue()

# FUNCI√ìN PARA DATOS PROPIOS
def analizar_datos_propios():
    st.header("üì§ Analizar Mis Datos")
    
    st.info("**Columnas requeridas:** Tratamiento, Ganancia_Peso_g")
    
    plantilla = pd.DataFrame({
        'Cuy': range(1, 21),
        'Tratamiento': ['T1']*5 + ['T2']*5 + ['T3']*5 + ['T4']*5,
        'Peso_Inicial_g': [250]*20,
        'Peso_Final_g': [750]*20,
        'Ganancia_Peso_g': [500]*20
    })
    csv = plantilla.to_csv(index=False).encode('utf-8')
    st.download_button("üì• Descargar Plantilla CSV", csv, "plantilla.csv", "text/csv")
    
    uploaded_file = st.file_uploader("Subir archivo", type=['csv', 'xlsx', 'xls'])
    
    if uploaded_file:
        try:
            df_usuario = pd.read_csv(uploaded_file) if uploaded_file.name.endswith('.csv') else pd.read_excel(uploaded_file)
            
            if 'Tratamiento' not in df_usuario.columns or 'Ganancia_Peso_g' not in df_usuario.columns:
                st.error("‚ùå Faltan columnas requeridas: Tratamiento y Ganancia_Peso_g")
                return
            
            st.success(f"‚úÖ {len(df_usuario)} observaciones cargadas correctamente")
            st.dataframe(df_usuario.head(10), use_container_width=True)
            
            if st.button("üî¨ Analizar Datos", type="primary"):
                tab1, tab2, tab3, tab4 = st.tabs(["üî¨ Supuestos", "üìä ANOVA", "üìà Gr√°ficos", "üí° Recomendaciones"])
                
                with tab1:
                    supuestos = pruebas_supuestos(df_usuario)
                
                with tab2:
                    result = calcular_anova_unifactorial_pasos(df_usuario)
                    mostrar_tabla_anova_unifactorial(result)
                    
                    if result['P_Value'] < alpha_custom:
                        st.markdown("---")
                        tukey_df, _ = tukey_hsd(df_usuario)
                        st.markdown("### üîç Comparaciones M√∫ltiples - Tukey HSD")
                        st.dataframe(tukey_df, use_container_width=True, hide_index=True)
                
                with tab3:
                    crear_graficos(df_usuario, result)
                
                with tab4:
                    mostrar_interpretaciones_y_recomendaciones(df_usuario, result, supuestos)
        
        except Exception as e:
            st.error(f"‚ùå Error al procesar archivo: {str(e)}")

# ==================== SECCIONES ====================

if seccion == "üè† Inicio":
    st.markdown("## üìÑ Problema de Investigaci√≥n")
    
    st.markdown("""
    ### üéØ Enunciado del Problema
    
    Un productor pecuario especializado en la crianza de cuyes (Cavia porcellus) desea **determinar 
    cu√°l es la dieta m√°s eficiente** para el engorde de estos animales hasta alcanzar el peso comercial 
    √≥ptimo (900-1000 gramos). El objetivo principal es **maximizar la ganancia de peso** minimizando 
    costos de alimentaci√≥n y el tiempo hasta la comercializaci√≥n.
    
    ### üî¨ Planteamiento Experimental
    
    Para resolver este problema, se dise√±√≥ un **experimento completamente aleatorizado (DCA)** 
    evaluando cuatro tipos diferentes de dietas alimenticias durante un per√≠odo de **12 semanas**.
    
    #### Variables del Experimento:
    
    - **Variable Independiente (Factor):** Tipo de dieta alimenticia
    - **Variable Dependiente (Respuesta):** Ganancia de peso en gramos
    - **Unidad Experimental:** Cuy individual o poza (seg√∫n el modelo)
    - **Periodo Experimental:** 12 semanas (84 d√≠as)
    """)
    
    st.markdown("---")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Tratamientos Evaluados")
        
        tratamientos_df = pd.DataFrame({
            'C√≥digo': ['T1', 'T2', 'T3', 'T4'],
            'Descripci√≥n': [
                'Balanceado comercial est√°ndar',
                'Forraje verde (alfalfa)',
                'Dieta mixta (balanceado + forraje)',
                'Dieta con probi√≥ticos'
            ],
            'Prote√≠na': ['18%', '20%', '16%', '19%'],
            'Tipo': ['Concentrado', 'Natural', 'Mixto', 'Suplementado']
        })
        
        st.dataframe(tratamientos_df, hide_index=True, use_container_width=True)
        
        st.markdown("""
        **Caracter√≠sticas de cada tratamiento:**
        
        - **T1 (Balanceado Comercial):** Alimento concentrado comercial est√°ndar con 18% de prote√≠na. 
          Es la dieta control tradicional utilizada por la mayor√≠a de productores.
        
        - **T2 (Forraje Verde):** Alimentaci√≥n basada en alfalfa fresca con alto contenido proteico (20%). 
          Representa una alternativa natural y potencialmente m√°s econ√≥mica.
        
        - **T3 (Dieta Mixta):** Combinaci√≥n estrat√©gica de concentrado comercial con forraje verde, 
          buscando balancear costos y nutrici√≥n (16% prote√≠na total).
        
        - **T4 (Con Probi√≥ticos):** Alimento balanceado suplementado con probi√≥ticos para mejorar 
          la digesti√≥n y absorci√≥n de nutrientes (19% prote√≠na).
        """)
    
    with col2:
        st.markdown("### üìä Informaci√≥n Experimental")
        
        st.metric("Animales por tratamiento", "15-20 cuyes")
        st.metric("Peso inicial promedio", "250 ¬± 20 g")
        st.metric("Duraci√≥n", "12 semanas")
        st.metric("Edad inicial", "21 d√≠as (destete)")
        
        st.info("""
        **Condiciones Controladas:**
        
        - Temperatura: 18-24¬∞C
        - Humedad: 60-70%
        - Ventilaci√≥n: Adecuada
        - Agua: Ad libitum
        - Fotoper√≠odo: Natural
        """)
    
    st.markdown("---")
    
    st.markdown("""
    ### üéØ Objetivos del Estudio
    
    #### Objetivo General:
    Determinar el efecto del tipo de dieta sobre la ganancia de peso en cuyes durante la fase de engorde.
    
    #### Objetivos Espec√≠ficos:
    
    1. Evaluar la ganancia de peso promedio de cada tratamiento
    2. Identificar el tratamiento con mayor rendimiento productivo
    3. Determinar si existen diferencias estad√≠sticamente significativas entre tratamientos
    4. Establecer recomendaciones t√©cnicas para la producci√≥n comercial
    5. Analizar la relaci√≥n costo-beneficio de cada dieta
    
    ### üìà Hip√≥tesis de Investigaci√≥n
    
    **H‚ÇÄ (Hip√≥tesis Nula):** No existen diferencias significativas en la ganancia de peso entre 
    los diferentes tipos de dieta evaluados.
    
    **H‚ÇÅ (Hip√≥tesis Alternativa):** Al menos uno de los tratamientos diet√©ticos produce una 
    ganancia de peso significativamente diferente a los dem√°s.
    
    ### üîç Dise√±os Experimentales Implementados
    
    En este estudio se implementaron **6 modelos diferentes** de Dise√±o Completamente al Azar (DCA):
    """)
    
    modelos_df = pd.DataFrame({
        'Modelo': ['1', '2', '3', '4', '5', '6'],
        'Tipo': [
            'Balanceado',
            'No Balanceado',
            'Bal-Bal (Submuestreo)',
            'Bal-NoBal (Submuestreo)',
            'NoBal-Bal (Submuestreo)',
            'NoBal-NoBal (Submuestreo)'
        ],
        'Descripci√≥n': [
            'Igual n√∫mero de cuyes por tratamiento',
            'Diferente n√∫mero de cuyes por tratamiento',
            'Igual pozas, igual cuyes por poza',
            'Igual pozas, diferente cuyes por poza',
            'Diferente pozas, igual cuyes por poza',
            'Diferente pozas, diferente cuyes por poza'
        ],
        'An√°lisis': [
            'ANOVA Unifactorial',
            'ANOVA Unifactorial',
            'ANOVA Anidado',
            'ANOVA Anidado',
            'ANOVA Anidado',
            'ANOVA Anidado'
        ]
    })
    
    st.dataframe(modelos_df, hide_index=True, use_container_width=True)
    
    st.success("""
    üí° **Nota Importante:** Los modelos 3-6 incluyen submuestreo (pozas), lo que permite 
    evaluar la variabilidad entre unidades experimentales (pozas) y dentro de ellas (cuyes individuales), 
    proporcionando un an√°lisis m√°s completo de las fuentes de variaci√≥n.
    """)

elif seccion == "üìö Teor√≠a":
    st.header("üìö Marco Te√≥rico - Dise√±o Completamente al Azar")
    
    st.markdown("""
    El **Dise√±o Completamente al Azar (DCA)** es uno de los dise√±os experimentales m√°s simples 
    y utilizados cuando las unidades experimentales son homog√©neas y se pueden asignar aleatoriamente 
    a los tratamientos.
    """)
    
    # ANOVA UNIFACTORIAL
    st.markdown("---")
    st.markdown("## 1Ô∏è‚É£ ANOVA Unifactorial (Un Factor)")
    
    st.markdown("""
    ### Modelo Estad√≠stico
    
    El modelo lineal para un DCA unifactorial es:
    """)
    
    st.latex(r"Y_{ij} = \mu + \tau_i + \varepsilon_{ij}")
    
    st.markdown("""
    **Donde:**
    - $Y_{ij}$ = Observaci√≥n j-√©sima del tratamiento i-√©simo
    - $\mu$ = Media general poblacional
    - $\tau_i$ = Efecto del i-√©simo tratamiento ($i = 1, 2, ..., t$)
    - $\varepsilon_{ij}$ = Error aleatorio ($j = 1, 2, ..., n_i$)
    
    **Supuestos:**
    - $\varepsilon_{ij} \sim N(0, \sigma^2)$ (normalidad)
    - $Var(\varepsilon_{ij}) = \sigma^2$ (homocedasticidad)
    - Errores independientes
    """)
    
    st.markdown("### Hip√≥tesis Estad√≠sticas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Hip√≥tesis Nula:**")
        st.latex(r"H_0: \tau_1 = \tau_2 = ... = \tau_t = 0")
        st.caption("Todos los tratamientos tienen el mismo efecto")
    
    with col2:
        st.markdown("**Hip√≥tesis Alternativa:**")
        st.latex(r"H_1: \exists \, i,j \, / \, \tau_i \neq \tau_j")
        st.caption("Al menos un tratamiento difiere")
    
    st.markdown("### F√≥rmulas de C√°lculo")
    
    st.markdown("#### 1. Media General")
    st.latex(r"\bar{Y}_{..} = \frac{1}{N}\sum_{i=1}^{t}\sum_{j=1}^{n_i}Y_{ij}")
    st.caption("N = n√∫mero total de observaciones")
    
    st.markdown("#### 2. Suma de Cuadrados Total (SCT)")
    st.latex(r"SCT = \sum_{i=1}^{t}\sum_{j=1}^{n_i}(Y_{ij} - \bar{Y}_{..})^2")
    st.caption("Mide la variabilidad total de los datos")
    
    st.markdown("#### 3. Suma de Cuadrados de Tratamientos (SC Trat)")
    st.latex(r"SC_{Trat} = \sum_{i=1}^{t}n_i(\bar{Y}_{i.} - \bar{Y}_{..})^2")
    st.caption("Variabilidad debida a diferencias entre tratamientos")
    
    st.markdown("#### 4. Suma de Cuadrados del Error (SC Error)")
    st.latex(r"SC_{Error} = \sum_{i=1}^{t}\sum_{j=1}^{n_i}(Y_{ij} - \bar{Y}_{i.})^2")
    st.caption("Variabilidad dentro de cada tratamiento")
    
    st.info(r"**Identidad fundamental:** $SCT = SC_{Trat} + SC_{Error}$")
    
    st.markdown("#### 5. Grados de Libertad")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.latex(r"gl_{Trat} = t - 1")
        st.caption("t = n√∫mero de tratamientos")
    
    with col2:
        st.latex(r"gl_{Error} = N - t")
        st.caption("N = total de observaciones")
    
    with col3:
        st.latex(r"gl_{Total} = N - 1")
    
    st.markdown("#### 6. Cuadrados Medios")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.latex(r"CM_{Trat} = \frac{SC_{Trat}}{gl_{Trat}}")
        st.caption("Varianza entre tratamientos")
    
    with col2:
        st.latex(r"CM_{Error} = \frac{SC_{Error}}{gl_{Error}}")
        st.caption("Varianza dentro de tratamientos")
    
    st.markdown("#### 7. Estad√≠stico F")
    st.latex(r"F_{calc} = \frac{CM_{Trat}}{CM_{Error}}")
    st.caption(r"Bajo $H_0$: $F_{calc} \sim F_{(t-1, N-t)}$")
    
    st.markdown("#### 8. Regla de Decisi√≥n")
    st.markdown(r"""
    - Si $F_{calc} > F_{cr√≠tico}$ o $p\text{-valor} < \alpha$: Rechazar $H_0$
    - Si $F_{calc} \leq F_{cr√≠tico}$ o $p\text{-valor} \geq \alpha$: No rechazar $H_0$
    """)
    
    # ANOVA BIFACTORIAL
    st.markdown("---")
    st.markdown("## 2Ô∏è‚É£ ANOVA Bifactorial (Dos Factores)")
    
    st.markdown("""
    ### Modelo Estad√≠stico
    
    Cuando se eval√∫an simult√°neamente dos factores:
    """)
    
    st.latex(r"Y_{ijk} = \mu + \alpha_i + \beta_j + (\alpha\beta)_{ij} + \varepsilon_{ijk}")
    
    st.markdown("""
    **Donde:**
    - $Y_{ijk}$ = Observaci√≥n k en el nivel i del Factor A y nivel j del Factor B
    - $\mu$ = Media general
    - $\alpha_i$ = Efecto del nivel i del Factor A
    - $\beta_j$ = Efecto del nivel j del Factor B
    - $(\alpha\beta)_{ij}$ = Efecto de interacci√≥n entre factores
    - $\varepsilon_{ijk}$ = Error aleatorio
    """)
    
    st.markdown("### Hip√≥tesis a Evaluar")
    
    st.markdown("**Para el Factor A:**")
    col1, col2 = st.columns(2)
    with col1:
        st.latex(r"H_0: \alpha_1 = \alpha_2 = ... = \alpha_a = 0")
    with col2:
        st.latex(r"H_1: \exists \, i \, / \, \alpha_i \neq 0")
    
    st.markdown("**Para el Factor B:**")
    col1, col2 = st.columns(2)
    with col1:
        st.latex(r"H_0: \beta_1 = \beta_2 = ... = \beta_b = 0")
    with col2:
        st.latex(r"H_1: \exists \, j \, / \, \beta_j \neq 0")
    
    st.markdown("**Para la Interacci√≥n AB:**")
    col1, col2 = st.columns(2)
    with col1:
        st.latex(r"H_0: (\alpha\beta)_{ij} = 0 \, \forall \, i,j")
    with col2:
        st.latex(r"H_1: \exists \, (i,j) \, / \, (\alpha\beta)_{ij} \neq 0")
    
    st.markdown("### F√≥rmulas de C√°lculo")
    
    st.markdown("#### 1. Sumas de Cuadrados")
    
    st.markdown("**SC Total:**")
    st.latex(r"SCT = \sum_{i=1}^{a}\sum_{j=1}^{b}\sum_{k=1}^{n_{ij}}(Y_{ijk} - \bar{Y}_{...})^2")
    
    st.markdown("**SC Factor A:**")
    st.latex(r"SC_A = bn\sum_{i=1}^{a}(\bar{Y}_{i..} - \bar{Y}_{...})^2")
    
    st.markdown("**SC Factor B:**")
    st.latex(r"SC_B = an\sum_{j=1}^{b}(\bar{Y}_{.j.} - \bar{Y}_{...})^2")
    
    st.markdown("**SC Interacci√≥n AB:**")
    st.latex(r"SC_{AB} = n\sum_{i=1}^{a}\sum_{j=1}^{b}(\bar{Y}_{ij.} - \bar{Y}_{i..} - \bar{Y}_{.j.} + \bar{Y}_{...})^2")
    
    st.markdown("**SC Error:**")
    st.latex(r"SC_{Error} = \sum_{i=1}^{a}\sum_{j=1}^{b}\sum_{k=1}^{n_{ij}}(Y_{ijk} - \bar{Y}_{ij.})^2")
    
    st.info(r"**Identidad:** $SCT = SC_A + SC_B + SC_{AB} + SC_{Error}$")
    
    st.markdown("#### 2. Grados de Libertad")
    
    tabla_gl = pd.DataFrame({
        'Fuente': ['Factor A', 'Factor B', 'Interacci√≥n AB', 'Error', 'Total'],
        'GL': ['a - 1', 'b - 1', '(a-1)(b-1)', 'ab(n-1)', 'abn - 1']
    })
    st.dataframe(tabla_gl, hide_index=True, use_container_width=True)
    
    st.markdown("#### 3. Cuadrados Medios y Estad√≠sticos F")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**Factor A:**")
        st.latex(r"CM_A = \frac{SC_A}{a-1}")
        st.latex(r"F_A = \frac{CM_A}{CM_{Error}}")
    
    with col2:
        st.markdown("**Factor B:**")
        st.latex(r"CM_B = \frac{SC_B}{b-1}")
        st.latex(r"F_B = \frac{CM_B}{CM_{Error}}")
    
    with col3:
        st.markdown("**Interacci√≥n:**")
        st.latex(r"CM_{AB} = \frac{SC_{AB}}{(a-1)(b-1)}")
        st.latex(r"F_{AB} = \frac{CM_{AB}}{CM_{Error}}")
    
    # ANOVA CON SUBMUESTREO (ANIDADO)
    st.markdown("---")
    st.markdown("## 3Ô∏è‚É£ ANOVA con Submuestreo (Modelo Anidado)")
    
    st.markdown("""
    ### Modelo Estad√≠stico
    
    Cuando hay submuestreo (ej: pozas dentro de tratamientos, cuyes dentro de pozas):
    """)
    
    st.latex(r"Y_{ijk} = \mu + \tau_i + \beta_{j(i)} + \varepsilon_{ijk}")
    
    st.markdown("""
    **Donde:**
    - $Y_{ijk}$ = Observaci√≥n k en la subunidad j del tratamiento i
    - $\mu$ = Media general poblacional
    - $\tau_i$ = Efecto del tratamiento i ($i = 1, 2, ..., t$)
    - $\beta_{j(i)}$ = Efecto de la subunidad j anidada en tratamiento i ($j = 1, 2, ..., n_i$)
    - $\varepsilon_{ijk}$ = Error experimental ($k = 1, 2, ..., m_{ij}$)
    
    **Nota:** La notaci√≥n $\beta_{j(i)}$ indica que el factor subunidad est√° anidado dentro del factor tratamiento.
    """)
    
    st.markdown("### Estructura Jer√°rquica")
    
    st.info("""
    **Niveles de variaci√≥n:**
    1. **Entre Tratamientos:** Diferencias entre tipos de dieta
    2. **Entre Subunidades (Pozas) dentro de Tratamientos:** Variabilidad entre pozas del mismo tratamiento
    3. **Dentro de Subunidades (Cuyes):** Variabilidad entre individuos de la misma poza
    """)
    
    st.markdown("### Hip√≥tesis")
    
    st.markdown("**Para Tratamientos:**")
    col1, col2 = st.columns(2)
    with col1:
        st.latex(r"H_0: \tau_1 = \tau_2 = ... = \tau_t = 0")
    with col2:
        st.markdown("No hay efecto de tratamientos")
    
    st.markdown("**Para Subunidades (Pozas):**")
    col1, col2 = st.columns(2)
    with col1:
        st.latex(r"H_0: \sigma^2_{\beta} = 0")
    with col2:
        st.markdown("No hay variabilidad entre pozas")
    
    st.markdown("### F√≥rmulas de C√°lculo")
    
    st.markdown("#### 1. Medias en Diferentes Niveles")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**Media General:**")
        st.latex(r"\bar{Y}_{...} = \frac{\sum\sum\sum Y_{ijk}}{N}")
    
    with col2:
        st.markdown("**Media Tratamiento i:**")
        st.latex(r"\bar{Y}_{i..} = \frac{\sum\sum Y_{ijk}}{n_i m_i}")
    
    with col3:
        st.markdown("**Media Subunidad j en i:**")
        st.latex(r"\bar{Y}_{ij.} = \frac{\sum Y_{ijk}}{m_{ij}}")
    
    st.markdown("#### 2. Sumas de Cuadrados")
    
    st.markdown("**SC Total:**")
    st.latex(r"SCT = \sum_{i=1}^{t}\sum_{j=1}^{n_i}\sum_{k=1}^{m_{ij}}(Y_{ijk} - \bar{Y}_{...})^2")
    
    st.markdown("**SC Tratamientos:**")
    st.latex(r"SC_{Trat} = \sum_{i=1}^{t}\sum_{j=1}^{n_i}\sum_{k=1}^{m_{ij}}(\bar{Y}_{i..} - \bar{Y}_{...})^2")
    st.caption("Variabilidad entre tratamientos")
    
    st.markdown("**SC Subunidades (Pozas) dentro de Tratamientos:**")
    st.latex(r"SC_{Sub(Trat)} = \sum_{i=1}^{t}\sum_{j=1}^{n_i}\sum_{k=1}^{m_{ij}}(\bar{Y}_{ij.} - \bar{Y}_{i..})^2")
    st.caption("Variabilidad entre pozas del mismo tratamiento")
    
    st.markdown("**SC Error (Cuyes dentro de Pozas):**")
    st.latex(r"SC_{Error} = \sum_{i=1}^{t}\sum_{j=1}^{n_i}\sum_{k=1}^{m_{ij}}(Y_{ijk} - \bar{Y}_{ij.})^2")
    st.caption("Variabilidad entre cuyes de la misma poza")
    
    st.info(r"**Identidad:** $SCT = SC_{Trat} + SC_{Sub(Trat)} + SC_{Error}$")
    
    st.markdown("#### 3. Grados de Libertad")
    
    tabla_gl_sub = pd.DataFrame({
        'Fuente': ['Tratamientos', 'Subunidades(Trat)', 'Error', 'Total'],
        'GL': ['t - 1', 'Œ£(n·µ¢ - 1)', 'Œ£ Œ£(m·µ¢‚±º - 1)', 'N - 1'],
        'Descripci√≥n': [
            'N√∫mero de tratamientos menos 1',
            'Suma de pozas por tratamiento menos n√∫mero de tratamientos',
            'Total de observaciones menos total de pozas',
            'Total de observaciones menos 1'
        ]
    })
    st.dataframe(tabla_gl_sub, hide_index=True, use_container_width=True)
    
    st.markdown("#### 4. Cuadrados Medios")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**CM Tratamientos:**")
        st.latex(r"CM_{Trat} = \frac{SC_{Trat}}{t-1}")
    
    with col2:
        st.markdown("**CM Subunidades:**")
        st.latex(r"CM_{Sub(Trat)} = \frac{SC_{Sub(Trat)}}{\sum(n_i-1)}")
    
    with col3:
        st.markdown("**CM Error:**")
        st.latex(r"CM_{Error} = \frac{SC_{Error}}{\sum\sum(m_{ij}-1)}")
    
    st.markdown("#### 5. Estad√≠sticos F")
    
    st.warning("""
    **‚ö†Ô∏è IMPORTANTE en Modelos Anidados:**
    
    La estructura de las pruebas F es diferente al ANOVA simple:
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Para Tratamientos:**")
        st.latex(r"F_{Trat} = \frac{CM_{Trat}}{CM_{Sub(Trat)}}")
        st.caption("‚ö†Ô∏è Se usa CM_Sub(Trat) como denominador, NO CM_Error")
        st.latex(r"F_{Trat} \sim F_{(t-1, \sum(n_i-1))}")
    
    with col2:
        st.markdown("**Para Subunidades:**")
        st.latex(r"F_{Sub(Trat)} = \frac{CM_{Sub(Trat)}}{CM_{Error}}")
        st.caption("Se usa CM_Error como denominador")
        st.latex(r"F_{Sub(Trat)} \sim F_{(\sum(n_i-1), \sum\sum(m_{ij}-1))}")
    
    st.markdown("#### 6. Interpretaci√≥n de Resultados")
    
    st.markdown("""
    **Si $F_{Trat}$ es significativo:**
    - Existen diferencias reales entre tratamientos
    - Se recomienda realizar comparaciones m√∫ltiples (Tukey, Duncan, etc.)
    
    **Si $F_{Sub(Trat)}$ es significativo:**
    - Existe variabilidad importante entre pozas del mismo tratamiento
    - El dise√±o con submuestreo fue necesario y apropiado
    - Las condiciones dentro de tratamientos no son homog√©neas
    
    **Si $F_{Sub(Trat)}$ NO es significativo:**
    - Poca variabilidad entre pozas del mismo tratamiento
    - Las condiciones dentro de tratamientos son homog√©neas
    - Un dise√±o sin submuestreo habr√≠a sido suficiente
    """)
    
    st.markdown("---")
    st.markdown("## üìä Comparaciones M√∫ltiples - Prueba de Tukey (HSD)")
    
    st.markdown("""
    Cuando el ANOVA indica diferencias significativas, se utiliza la prueba de Tukey 
    para determinar **qu√© pares de tratamientos difieren**.
    """)
    
    st.markdown("### Estad√≠stico de Tukey")
    st.latex(r"HSD = q_{\alpha, t, gl_{error}} \times \sqrt{\frac{CM_{Error}}{n}}")
    
    st.markdown("""
    **Donde:**
    - $HSD$ = Diferencia Honestamente Significativa (Honestly Significant Difference)
    - $q_{\alpha, t, gl_{error}}$ = Valor cr√≠tico del rango estudentizado
    - $CM_{Error}$ = Cuadrado medio del error
    - $n$ = N√∫mero de repeticiones por tratamiento (para dise√±os balanceados)
    
    **Regla de decisi√≥n:**
    - Si $|\bar{Y}_i - \bar{Y}_j| > HSD$: Los tratamientos i y j son significativamente diferentes
    - Si $|\bar{Y}_i - \bar{Y}_j| \leq HSD$: No hay diferencia significativa
    """)
    
    st.markdown("### Para Dise√±os No Balanceados")
    
    st.markdown("Se utiliza la media arm√≥nica:")
    st.latex(r"n_{harmonica} = \frac{2}{\frac{1}{n_i} + \frac{1}{n_j}}")
    
    st.markdown("---")
    st.success("""
    üí° **Resumen de Selecci√≥n de An√°lisis:**
    
    - **ANOVA Unifactorial:** Un solo factor de inter√©s (tipo de dieta)
    - **ANOVA Bifactorial:** Dos factores simult√°neos (dieta + sexo, por ejemplo)
    - **ANOVA Anidado:** Estructura jer√°rquica con submuestreo (dieta ‚Üí poza ‚Üí cuy)
    """)

elif seccion == "üìä Modelos Experimentales":
    
    def mostrar_analisis_completo(df, titulo, descripcion, tiene_submuestreo=False):
        st.header(titulo)
        st.info(descripcion)
        
        if tiene_submuestreo:
            tabs = st.tabs(["üìä Datos", "üî¨ Supuestos", "üî¢ ANOVA Unifactorial", "üéØ ANOVA Submuestreo", 
                           "üî¢ ANOVA Bifactorial", "üìà Gr√°ficos", "üí° Recomendaciones", "üì• Exportar"])
        else:
            tabs = st.tabs(["üìä Datos", "üî¨ Supuestos", "üî¢ ANOVA Unifactorial", "üî¢ ANOVA Bifactorial", 
                           "üìà Gr√°ficos", "üí° Recomendaciones", "üì• Exportar"])
        
        with tabs[0]:
            st.dataframe(df, use_container_width=True, height=400)
            
            # Resumen estad√≠stico
            st.markdown("### üìã Resumen Estad√≠stico por Tratamiento")
            resumen = df.groupby('Tratamiento')['Ganancia_Peso_g'].agg([
                ('n', 'count'),
                ('Media', 'mean'),
                ('Mediana', 'median'),
                ('Desv.Est', 'std'),
                ('M√≠n', 'min'),
                ('M√°x', 'max')
            ]).round(2)
            st.dataframe(resumen, use_container_width=True)
        
        with tabs[1]:
            supuestos = pruebas_supuestos(df)
        
        with tabs[2]:
            result_uni = calcular_anova_unifactorial_pasos(df)
            st.markdown("---")
            mostrar_tabla_anova_unifactorial(result_uni)
            
            if result_uni['P_Value'] < alpha_custom:
                st.markdown("---")
                tukey_df, _ = tukey_hsd(df)
                st.markdown("### üîç Tukey HSD")
                st.dataframe(tukey_df, use_container_width=True, hide_index=True)
        
        if tiene_submuestreo:
            with tabs[3]:
                result_sub = calcular_anova_submuestreo_pasos(df)
                st.markdown("---")
                mostrar_tabla_anova_anidado(result_sub)
            
            with tabs[4]:
                result_bif = calcular_anova_bifactorial_pasos(df)
                st.markdown("---")
                mostrar_tabla_anova_bifactorial(result_bif)
            
            with tabs[5]:
                crear_graficos(df, result_uni)
            
            with tabs[6]:
                mostrar_interpretaciones_y_recomendaciones(df, result_uni, supuestos)
            
            with tabs[7]:
                tukey_df, _ = tukey_hsd(df) if result_uni['P_Value'] < alpha_custom else (pd.DataFrame(), None)
                excel_data = exportar_excel(df, result_uni, result_sub, tukey_df, supuestos)
                st.download_button("üì• Descargar An√°lisis Completo (Excel)", excel_data, 
                                 f"{titulo.lower().replace(' ', '_').replace(':', '')}.xlsx",
                                 "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                 type="primary")
        else:
            with tabs[3]:
                result_bif = calcular_anova_bifactorial_pasos(df)
                st.markdown("---")
                mostrar_tabla_anova_bifactorial(result_bif)
            
            with tabs[4]:
                crear_graficos(df, result_uni)
            
            with tabs[5]:
                mostrar_interpretaciones_y_recomendaciones(df, result_uni, supuestos)
            
            with tabs[6]:
                tukey_df, _ = tukey_hsd(df) if result_uni['P_Value'] < alpha_custom else (pd.DataFrame(), None)
                excel_data = exportar_excel(df, result_uni, {}, tukey_df, supuestos)
                st.download_button("üì• Descargar An√°lisis Completo (Excel)", excel_data, 
                                 f"{titulo.lower().replace(' ', '_').replace(':', '')}.xlsx",
                                 "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                 type="primary")
    
    if modelo_seleccionado == "Modelo 1: Balanceado":
        df = generar_datos_modelo1()
        mostrar_analisis_completo(df, "Modelo 1: Balanceado", "60 cuyes (15/trat)")
    
    elif modelo_seleccionado == "Modelo 2: No Balanceado":
        df = generar_datos_modelo2()
        mostrar_analisis_completo(df, "Modelo 2: No Balanceado", "68 cuyes (14,18,16,20)")
    
    elif modelo_seleccionado == "Modelo 3: Bal-Bal (Sub)":
        df = generar_datos_modelo3()
        mostrar_analisis_completo(df, "Modelo 3: Bal-Bal", "20 pozas, 4 cuyes/poza", tiene_submuestreo=True)
    
    elif modelo_seleccionado == "Modelo 4: Bal-NoBal (Sub)":
        df = generar_datos_modelo4()
        mostrar_analisis_completo(df, "Modelo 4: Bal-NoBal", "20 pozas, 3-5 cuyes/poza", tiene_submuestreo=True)
    
    elif modelo_seleccionado == "Modelo 5: NoBal-Bal (Sub)":
        df = generar_datos_modelo5()
        mostrar_analisis_completo(df, "Modelo 5: NoBal-Bal", "4-7 pozas, 4 cuyes/poza", tiene_submuestreo=True)
    
    elif modelo_seleccionado == "Modelo 6: NoBal-NoBal (Sub)":
        df = generar_datos_modelo6()
        mostrar_analisis_completo(df, "Modelo 6: NoBal-NoBal", "Completamente desbalanceado", tiene_submuestreo=True)

elif seccion == "üì§ Mis Datos":
    analizar_datos_propios()

elif seccion == "üìà Comparaci√≥n de Modelos":
    st.header("üìà Comparaci√≥n entre Modelos")
    
    modelos_data = {
        "M1": generar_datos_modelo1(),
        "M2": generar_datos_modelo2(),
        "M3": generar_datos_modelo3(),
        "M4": generar_datos_modelo4(),
        "M5": generar_datos_modelo5(),
        "M6": generar_datos_modelo6()
    }
    
    comparacion = []
    for nombre, df in modelos_data.items():
        grupos = [df[df['Tratamiento'] == t]['Ganancia_Peso_g'].values for t in df['Tratamiento'].unique()]
        f_stat, p_value = stats.f_oneway(*grupos)
        
        comparacion.append({
            'Modelo': nombre,
            'n': len(df),
            'F': round(f_stat, 4),
            'P-valor': round(p_value, 6),
            'Sig': 'S√≠ ‚úì' if p_value < alpha_custom else 'No ‚úó'
        })
    
    st.dataframe(pd.DataFrame(comparacion), use_container_width=True, hide_index=True)

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>Dina Maribel Yana Yucra | C√≥digo: 221086</p>
</div>
""", unsafe_allow_html=True)
